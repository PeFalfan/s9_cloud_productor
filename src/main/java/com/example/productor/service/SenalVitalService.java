package com.example.productor.service;

import com.example.productor.model.SenalVital;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import java.util.Random;

@Service
public class SenalVitalService {

    private final KafkaTemplate<String, String> kafkaTemplate;

    private static final String TOPIC = "topic_s8";  // T√≥pico para todas las se√±ales vitales
    private static final String ALERT_TOPIC = "topic_alertas";  // T√≥pico solo para anomal√≠as

    private final Random random = new Random();

    public SenalVitalService(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    /**
     * Genera y env√≠a se√±ales vitales aleatorias cada minuto.
     */
    @Scheduled(fixedRate = 60000)  // Se ejecuta cada 60,000 ms (1 minuto)
    public void enviarSenalesAutomaticamente() {
        SenalVital senale = generarSenales();
        System.out.println("üì° Enviando se√±ales vitales a Kafka: " + senale);
        enviarSenalVital(senale);
    }

    /**
     * Genera se√±ales vitales con valores aleatorios.
     */
    public SenalVital generarSenales() {
        return new SenalVital(
                random.nextInt(60) + 40,   // Ritmo card√≠aco entre 40 - 100 bpm
                35.5 + (random.nextDouble() * 3),  // Temperatura entre 35.5 - 38.5¬∞C
                random.nextInt(60) + 80,  // Presi√≥n sist√≥lica entre 80 - 140 mmHg
                random.nextInt(40) + 50    // Presi√≥n diast√≥lica entre 50 - 90 mmHg
        );
    }

    /**
     * Env√≠a las se√±ales vitales al t√≥pico correcto.
     */
    public void enviarSenalVital(SenalVital senalVital) {
        try {
            String mensaje = new ObjectMapper().writeValueAsString(senalVital);

            kafkaTemplate.send(TOPIC, mensaje);
            System.out.println("‚úÖ Se√±al vital enviada a Kafka en " + TOPIC);

            if (esAnomalia(senalVital)) {
                kafkaTemplate.send(ALERT_TOPIC, mensaje);
                System.out.println("‚ö†Ô∏è Alerta enviada a Kafka en " + ALERT_TOPIC + " üö®");
            }

        } catch (JsonProcessingException e) {
            throw new RuntimeException("‚ùå Error al serializar la se√±al vital", e);
        }
    }

    private boolean esAnomalia(SenalVital senal) {
        return senal.getRitmoCardiaco() < 60 || senal.getRitmoCardiaco() > 100 ||
               senal.getTemperatura() < 36.0 || senal.getTemperatura() > 37.5 ||
               senal.getPresionSistolica() < 90 || senal.getPresionSistolica() > 140 ||
               senal.getPresionDiastolica() < 60 || senal.getPresionDiastolica() > 90;
    }
}
